[
    {
      "name": "Glimpse of Clarity",
      "description": "Deals low damage. If the target is 'Watched', removes the status and grants the attacker momentum.",
      "emoji": "üëÅÔ∏è",
      "momentum_cost": 25,
      "script": {
        "trigger_type": "on_attack",
        "lua_code": "log(get_player_name(ATTACKER_ROLE) .. ' used Glimpse of Clarity!', 'action', ATTACKER_ROLE, {attack_name='Glimpse of Clarity', emoji='üëÅÔ∏è'})\\napply_std_damage(20, TARGET_ROLE)\\nif has_custom_status(TARGET_ROLE, 'Watched') then\\n  remove_custom_status(TARGET_ROLE, 'Watched')\\n  log(get_player_name(TARGET_ROLE) .. ' is no longer Watched.', 'status_remove', 'script')\\n  local momentum_gain = 20\\n  local current_momentum = get_momentum(ATTACKER_ROLE)\\n  local new_momentum = current_momentum + momentum_gain\\n  log('Granting ' .. momentum_gain .. ' momentum to ' .. get_player_name(ATTACKER_ROLE), 'info', 'script')\\nend"
      }
    },
    {
      "name": "Overwatching Roots",
      "description": "Applies 'Watched' to the target for 3 turns. Watched targets take increased damage from follow-up attacks.",
      "emoji": "üå≥",
      "momentum_cost": 30,
      "script": {
        "trigger_type": "on_attack",
        "lua_code": "log(get_player_name(ATTACKER_ROLE) .. ' used Overwatching Roots!', 'action', ATTACKER_ROLE, {attack_name='Overwatching Roots', emoji='üå≥'})\\nset_custom_status(TARGET_ROLE, 'Watched', 3)\\nlog(get_player_name(TARGET_ROLE) .. ' is now Watched!', 'status_apply', 'script')"
      }
    },
    {
      "name": "Branch Lash",
      "description": "Deals moderate damage. Deals bonus damage if the target is 'Watched'.",
      "emoji": "üåø",
      "momentum_cost": 35,
      "script": {
        "trigger_type": "on_attack",
        "lua_code": "log(get_player_name(ATTACKER_ROLE) .. ' used Branch Lash!', 'action', ATTACKER_ROLE, {attack_name='Branch Lash', emoji='üåø'})\\nlocal base_damage = 40\\nlocal bonus_damage = 0\\nif has_custom_status(TARGET_ROLE, 'Watched') then\\n  bonus_damage = 20\\n  log('Applying bonus damage due to Watched status', 'debug', 'debug')\\nend\\nlocal total_damage = base_damage + bonus_damage\\napply_std_damage(total_damage, TARGET_ROLE)\\nlog(get_player_name(TARGET_ROLE) .. ' took ' .. total_damage .. ' damage.', 'damage', 'script')"
      }
    },
    {
      "name": "Sprout of Insight",
      "description": "Heals the attacker for a small amount. Also grants a small amount of momentum.",
      "emoji": "üå±",
      "momentum_cost": 20,
      "script": {
        "trigger_type": "on_attack",
        "lua_code": "log(get_player_name(ATTACKER_ROLE) .. ' used Sprout of Insight!', 'action', ATTACKER_ROLE, {attack_name='Sprout of Insight', emoji='üå±'})\\nlocal heal_amount = math.floor(get_max_hp(ATTACKER_ROLE) * 0.1)\\napply_std_hp_change(heal_amount, ATTACKER_ROLE)\\nlog(get_player_name(ATTACKER_ROLE) .. ' recovered ' .. heal_amount .. ' HP.', 'heal', 'script')\\nlocal momentum_gain = 10\\nlocal current_momentum = get_momentum(ATTACKER_ROLE)\\nlocal new_momentum = current_momentum + momentum_gain\\n\\nlog('Granting ' .. momentum_gain .. ' momentum to ' .. get_player_name(ATTACKER_ROLE), 'info', 'script')"
      }
    },
    {
      "name": "Eerie Observation",
      "description": "Lowers the target's speed stage for 2 turns. Applies 'Observed' which reduces effectiveness of heals.",
      "emoji": "üßø",
      "momentum_cost": 30,
      "script": [
        {
          "trigger_type": "on_attack",
          "lua_code": "log(get_player_name(ATTACKER_ROLE) .. ' used Eerie Observation!', 'action', ATTACKER_ROLE, {attack_name='Eerie Observation', emoji='üßø'})\\napply_std_stat_change('speed', -1, TARGET_ROLE)\\nlog(get_player_name(TARGET_ROLE) .. '\'s Speed was lowered!', 'stat_change', 'script')\\nset_custom_status(TARGET_ROLE, 'Observed', 2)\\nlog(get_player_name(TARGET_ROLE) .. ' is now Observed!', 'status_apply', 'script')"
        },
        {
          "trigger_type": "after_target_turn",
          "lua_code": "log('Checking for Observed status on ' .. get_player_name(SCRIPT_TARGET_ROLE), 'debug', 'debug')\\nif has_custom_status(SCRIPT_TARGET_ROLE, 'Observed') then\\n  local duration = get_custom_status(SCRIPT_TARGET_ROLE, 'Observed')\\n  if duration <= 1 then\\n      log('Observed duration ended.', 'debug', 'debug')\\n      remove_custom_status(SCRIPT_TARGET_ROLE, 'Observed')\\n      log(get_player_name(SCRIPT_TARGET_ROLE) .. ' is no longer Observed.', 'status_remove', 'script')\\n      log('Unregistering Observed script instance: ' .. CURRENT_REGISTRATION_ID, 'debug', 'debug')\\n      unregister_script(CURRENT_REGISTRATION_ID) -- Unregister when effect ends\\n  else\\n      log('Decrementing Observed duration from ' .. duration .. ' to ' .. (duration-1), 'debug', 'debug')\\n      modify_custom_status(SCRIPT_TARGET_ROLE, 'Observed', -1) -- Decrement duration\\n  end\\nelse\\n  -- If status removed by other means, still unregister script\\n  log('Observed status not found, unregistering script instance: ' .. CURRENT_REGISTRATION_ID, 'debug', 'debug')\\n  unregister_script(CURRENT_REGISTRATION_ID)\\nend"
        }
      ]
    },
    {
      "name": "Photosynthesis Beam",
      "description": "Heals attacker. If 'Observed', heal is reduced by 50%.",
      "emoji": "‚òÄÔ∏è",
      "momentum_cost": 40,
      "script": {
        "trigger_type": "on_attack",
        "lua_code": "log(get_player_name(ATTACKER_ROLE) .. ' used Photosynthesis Beam!', 'action', ATTACKER_ROLE, {attack_name='Photosynthesis Beam', emoji='‚òÄÔ∏è'})\\nlocal heal_percent = 0.3\\nif has_custom_status(TARGET_ROLE, 'Observed') then\\n  heal_percent = heal_percent * 0.5\\n  log('Healing reduced by 50% due to Observed', 'debug', 'debug')\\nend\\nlocal heal_amount = math.floor(get_max_hp(ATTACKER_ROLE) * heal_percent)\\napply_std_hp_change(heal_amount, ATTACKER_ROLE)\\nlog(get_player_name(ATTACKER_ROLE) .. ' recovered ' .. heal_amount .. ' HP.', 'heal', 'script')"
      }
    }
  ]